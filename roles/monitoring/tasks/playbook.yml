- name: Install Grafana Alloy
  become: true
  collections:
    - grafana.grafana
  roles:
    - grafana.grafana.alloy
  vars:
    alloy_env_file_vars: { 
      set_collectors: [
        arp,
        bonding,
        boottime,
        cpu,
        cpufreq,
        conntrack,
        diskstats,
        ethtool,
        filesystem,
        meminfo,
        netclass,
        netdev,
        nvme,
        os
      ],
      CUSTOM_ARGS: "--disable-reporting"
    }
    
    alloy_config: |
      
      prometheus.exporter.unix "localhost" {
      }
      prometheus.scrape "default" {
        // Setting the scrape interval lower to make it faster to be able to see the metrics
        scrape_interval = "10s"
        targets    = prometheus.exporter.unix.localhost.targets
        forward_to = [
          prometheus.remote_write.prom.receiver,
        ]
      }
      prometheus.remote_write "prom" {
        endpoint {
        url = "http://{{ PROMETHEUS_ENDPOINT }}/api/v1/write"
        }
      }
      loki.relabel "journal" {
        forward_to = []

        rule {
          source_labels = ["__journal__systemd_unit"]
          target_label  = "unit"
        }
      }

      loki.source.journal "read"  {
        forward_to    = [loki.process.filter_logs.receiver]
        relabel_rules = loki.relabel.journal.rules
        labels        = {component = "loki.source.journal"}
      }

      loki.process "filter_logs" {
        stage.drop {
          source = ""
          expression  = ".*Connection closed by authenticating user root"
          drop_counter_reason = "noisy"
        }
        stage.drop {
          source = ""
          expression = ".*session closed for user root"
          drop_counter_reason = "noisy"
        }
        stage.labels {
          values = {
            env  = "",         // Sets up an 'env' label, based on the 'env' extracted value.
            user = "user", // Sets up a 'user' label, based on the 'username' extracted value.
            level = "level",
          }
        }    
        forward_to = [loki.relabel.relabel.receiver]
      }

      loki.relabel "relabel" {
        forward_to = [loki.write.grafana_loki.receiver]
        rule {
          target_label = "os"
          replacement = constants.os
        }

        rule {
          target_label = "hostname"
          replacement = constants.hostname
        }

      }
      loki.write "grafana_loki" {
        endpoint {
          url = "http://{{ LOKI_ENDPOINT }}/loki/api/v1/push"

          // basic_auth {
          //  username = "admin"
          //  password = "admin"
          // }
        }
      }
